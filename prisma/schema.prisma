generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Staff {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  staffId        String   @unique
  hashedPassword String
  firstName      String
  lastName       String
  phone          String?
  imageURL       String?
  role           RoleName
}

model Applicant {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  formIVIndex     String              @unique
  hashedPassword  String
  firstName       String
  lastName        String
  status          ApplicantStatusName
  role            RoleName            @default(APPLICANT)
  controlNumberId String?
  phone           String
  email           String?
}

model Student {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  hashedPassword String
  studentId      String   @unique
  firstName      String
  lastName       String
  imageURL       String?
  role           RoleName @default(STUDENT)
  phone          String?
  email          String?
}

model StudentAdmission {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId       String? @unique
  admissionNumber Int     @unique
}

model StudentPositions {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  studentID String         @unique
  positions PositionName[]
}

model ControlNumber {
  id     String                  @id @default(auto()) @map("_id") @db.ObjectId
  status ControlNumberStatusName @default(GENERATED)
}

model csee {
  code        String  @id @map("_id")
  shortHand   String  @unique
  name        String
  isReligious Boolean
}

model admissionRequirement {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  programmeCode    String
  requiredSubjects String[]
  optionalSubjects String[]
  allowReligious   Boolean
}

enum ControlNumberStatusName {
  GENERATED //The control number has been created but not yet used.
  PENDING //The payment or transaction associated with the control number is awaiting completion.
  COMPLETED //The payment or transaction associated with the control number has been successfully completed.
  FAILED //The payment or transaction associated with the control number was not successful.
  EXPIRED //The control number is no longer valid, typically due to a time limit.
}

enum ApplicantStatusName {
  SUBMITTED //The application has been received but not yet reviewed
  UNDER_REVIEW //The application is currently being reviewed by the admissions team.
  WAITLISTED // The applicant meets the admission requirements but the program is full. If a spot opens up, they may be admitted.
  ACCEPTED //The application has been approved. The applicant can now proceed to enrollment.
  REJECTED //The application has not been approved. The applicant will not be able to enroll.
  DEFERRED //The applicant has been accepted, but their admission has been postponed to a later date.
}

model StudentAcademicDetails {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String @unique
  academicYearId   String @db.ObjectId
  programmeClassId String @db.ObjectId
}

model AcademicFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

model TuitionFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

model HealthCare {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String               @db.ObjectId
  controlNumber  Int
  stutus         HealthCareStatusName @default(INACTIVE)
}

enum HealthCareStatusName {
  ACTIVE
  INACTIVE
}

model MealsFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

model AccomodationFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

enum PositionName {
  STUDENT_PRESIDENT
  CLASS_REPRESENTATIVE
}

enum RoleName {
  EXAMINATION_OFFICER
  LECTURE
  STUDENT
  APPLICANT
}

enum ProgrammeClassName {
  I
  II
  III
  IV
}

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  name      String   @unique
}

model University {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model College {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  universityId String @db.ObjectId
}

model Department {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  collegeId String @db.ObjectId
}

model Programme {
  code         String              @id @map("_id")
  name         String
  levelName    String
  duration     Int
  status       ProgrammeStatusName
  departmentId String              @db.ObjectId
  tuitionFee   Float
}

enum ProgrammeStatusName {
  FULL_TIME
  PART_TIME
}

model ProgrammeClass {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          ProgrammeClassName
  programmeCode String
}

model Semester {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  academicYearId String   @db.ObjectId
  createdAt      DateTime
}

model TestResult {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String
  marks            Int?
  componentId      String @db.ObjectId
  moduleInstanceId String @db.ObjectId
}

model TaskResult {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String
  marks            Int?
  componentId      String  @db.ObjectId
  submitted        Boolean @default(false)
  fileUrl          String?
  moduleInstanceId String  @db.ObjectId
}

model UEResult {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  marks            Int?
  studentId        String @db.ObjectId
  moduleInstanceId String @db.ObjectId
}

model Component {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  maxMarks         Int
  type             ComponentTypeName
  description      String?
  moduleInstanceId String            @db.ObjectId
}

enum ComponentTypeName {
  TASK
  TEST
}

model Module {
  code             String   @id @map("_id")
  name             String
  credits          Int
  CaMarks          Int
  resourceUrls     String[]
  programmeClassId String   @db.ObjectId
}

//TODO: Add resources 
model ModuleInstance {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  moduleCode String
  semesterId String @db.ObjectId
  lecturerId String @db.ObjectId
}

// FIXME: FOR NECTA API
model OLevelResult {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  formIVIndex String @unique
}
