generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Staff {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  staffId   String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  imageURL  String?
  role      RoleName
}

model Student {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  password  String
  studentId String   @unique
  firstName String
  lastName  String
  imageURL  String?
  role      RoleName @default(STUDENT)
  phone     String?
}

model StudentPositions {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  studentID String         @unique
  positions PositionName[]
}

model StudentAcademicDetails {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String @unique
  academicYearId   String @db.ObjectId
  programmeClassId String @db.ObjectId
}

model AcademicFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

model TuitionFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

model HealthCare {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String               @db.ObjectId
  controlNumber  Int
  stutus         HealthCareStatusName @default(INACTIVE)
}

enum HealthCareStatusName {
  ACTIVE
  INACTIVE
}

model MealsFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

model AccomodationFee {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String
  academicYearId String @db.ObjectId
  controlNumber  Int
  paymentDue     Float
  amoutPayed     Float  @default(0)
}

enum PositionName {
  STUDENT_PRESIDENT
  CLASS_REPRESENTATIVE
}

enum RoleName {
  EXAMINATION_OFFICER
  LECTURE
  STUDENT
}

enum LevelName {
  DIPLOMA
  BACHELOR
  CERTIFICATE
}

enum ProgrammeClassName {
  I
  II
  III
  IV
}

model AcademicYear {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  name      String   @unique
}

model University {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

model College {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  universityId String @db.ObjectId
}

model Department {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  collegeId String @db.ObjectId
}

model Programme {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  level        LevelName
  departmentId String    @db.ObjectId
  tuitionFee   Float
}

model ProgrammeClass {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        ProgrammeClassName
  programmeId String             @db.ObjectId
}

enum RegistrationStatusName {
  REGISTERED
  NOT_REGISTERED
}

model Semester {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  academicYearId String   @db.ObjectId
  createdAt      DateTime
}

model TestResult {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String
  marks            Int?
  componentId      String @db.ObjectId
  courseInstanceId String @db.ObjectId
}

model TaskResult {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId        String
  marks            Int?
  componentId      String  @db.ObjectId
  submitted        Boolean @default(false)
  fileUrl          String?
  courseInstanceId String  @db.ObjectId
}

model UEResult {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  marks            Int?
  studentId        String @db.ObjectId
  courseInstanceId String @db.ObjectId
}

model Component {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  maxMarks         Int
  type             ComponentTypeName
  description      String?
  courseInstanceId String            @db.ObjectId
}

enum ComponentTypeName {
  TASK
  TEST
}

model Course {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  code             String   @unique
  credits          Int
  resourceUrls     String[]
  programmeClassId String   @db.ObjectId
}

//TODO: Add resources 
model CourseInstance {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String @db.ObjectId
  semesterId String @db.ObjectId
  lecturerId String @db.ObjectId
}
